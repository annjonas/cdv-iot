Wszystkie elementy powinny być w chmurze i trafić na azure. Kod backendowy powinien być w C# .NET

System analityki parkingowej - celem systemu jest danie użytkownikowi możliwości sprawdzenia ilości wolnych miejsc parkingowych na aplikacji mobilnej. Wejściowo system zczytuje obrazy z kamer miejskich lub zainstalowanych przez użytkownika, a potem AI analizuje te zdjęcia i zapisuje rekord z obecną ilością widocznych miejsc wolnych.

System jest na zaliczenie przedmiotu na studiach i niektóre elementy mogą być makietami. Nie musisz też się martwić jakąś ogromną skalą.

Elementy systemu:

A: Kamery
    Zarówno kamery miejskie jak i kamery użytkownika wystawiają API RESTowe z endpointem, który zwraca obraz z kamery. Dla uproszczenia kamery będą makietą, która generuje bitmapę, a samochody bądź wolne miejsca będą pojedynczymi pikselami o określonym kolorze. Jako, że są makietą, to można też pomyśleć nad jakąś prostą konfiguracją, np. ogólną ilością miejsc i jakieś parametry symulacji ruchu pojazdów w ciągu doby. W endpoincie to pobierania przyda też się jakiś parametr testowy, który pozwala na przekazania daty w przyszłości, co pozwoli na zaprezentowanie działania systemu w czasie w trakcie prezentacji bez czekania godzinami na symulowane zmiany ruchu.

B: Cykliczne pobieranie obrazów (Azure Function z Timer Trigger)
    Zastępuje tradycyjną bramkę IOT. Funkcja uruchamiana cyklicznie (np. co 5 minut), która odpytuje bazę danych o listę kamer, pobiera z nich obrazy i zapisuje je w Magazynie Obiektów (C).

C: Magazyn Obiektów (Azure Blob Storage)
    Blob storage do przechowywanie obrazów z kamer przed ich przetworzeniem.

D: Przetwarzanie obrazów (Azure Function z Blob Trigger)
    Funkcja uruchamiana automatycznie przez zdarzenie dodania nowego obiektu do Magazynu (C). Pobiera obraz, wysyła go do analizy przez model AI (E) i zapisuje wynik (ilość wolnych miejsc) w bazie danych (F).

E: Model wizji AI
    W założeniu zewnętrzne API z modelem AI przyjmującym obraz i dokonującym analizy. Na potrzeby projektu niech to będzie makieta, która zlicza piksele według opisu w (A).

F: Baza danych NoSQL (Azure Cosmos DB)
    Przechowuje dane o parkingach i historii wolnych miejsc.
    - Kolekcja `ParkingLots`: informacje o parkingach (ID, lokalizacja, nazwa, całkowita liczba miejsc).
    - Kolekcja `ParkingStateHistory`: historia stanu parkingu (ID parkingu, znacznik czasu, liczba wolnych miejsc).

G: API REST (Azure App Service)
    Pośredniczy między bazą danych a aplikacjami użytkownika. Hostowane jako aplikacja webowa w App Service dla łatwiejszego zarządzania i skalowania (zamiast VM). Odpowiada za:
    - Udostępnianie danych o parkingach i wolnych miejscach.
    - Umożliwienie użytkownikom dodawania własnych kamer.
    - Autentykację i autoryzację użytkowników (np. z użyciem Azure AD B2C).

H: Aplikacja SPA (Azure App Service)
    Aplikacja webowa (np. React, Angular) hostowana w Azure App Service, stanowiąca interfejs użytkownika dla API (G).

I: Aplikacja mobilna
    Aplikacja na platformy mobilne (np. React Native), która również komunikuje się z API (G).
